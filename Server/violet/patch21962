Index: net/violet/platform/dataobjects/TtsLangData.java
===================================================================
--- net/violet/platform/dataobjects/TtsLangData.java	(révision 21962)
+++ net/violet/platform/dataobjects/TtsLangData.java	(copie de travail)
@@ -11,7 +11,8 @@
 import net.violet.platform.datamodel.Lang;
 import net.violet.platform.datamodel.User;
 import net.violet.platform.datamodel.factories.Factories;
-import net.violet.platform.voice.LanguageIdentification;
+import org.apache.nutch.analysis.lang.LanguageIdentifier;
+import org.apache.nutch.util.NutchConfiguration;
 
 /**
  * Les langues du site.
@@ -120,12 +121,12 @@
 	}
 
 	public static TtsLangData getIdentifyLanguage(String inText) {
-		final String theIdentifiedLang = LanguageIdentification.identifyLanguage(inText);
+		final String theIdentifiedLang = TtsLangData.identifyLanguage(inText);
 		return TtsLangData.getDefaultTtsLanguage(theIdentifiedLang);
 	}
 
 	public static TtsLangData getIdentifyLanguage(String inText, SiteLangData inLang) {
-		final String theTargetLangData = LanguageIdentification.identifyLanguage(inText);
+		final String theTargetLangData = TtsLangData.identifyLanguage(inText);
 		final List<TtsLangData> theList = TtsLangData.getAllTtsLanguageByCode(theTargetLangData);
 		final TtsLangData theResult;
 		if (theList.isEmpty()) {
@@ -136,7 +137,39 @@
 		return theResult;
 	}
 
+	private static final LanguageIdentifier IDENTIFIER = new LanguageIdentifier(NutchConfiguration.create());
+
+	//Patch temporaire, on a aucun endroit sur la bdd pour savoir 
+	//quelle est la langue par défaut à partir d'un isocode court.
+	private static final Map<String, String> ISOCODE = new HashMap<String, String>();
+	static {
+		TtsLangData.ISOCODE.put("fr", "fr-FR");
+		TtsLangData.ISOCODE.put("en", "en-US");
+	}
+
 	/**
+	 * Identifie du texte et retourne la langue de ce texte.
+	 * 
+	 * @param inString chaîne dont on veut la langue.
+	 * @return code IETF (court) de la langue pour cette chaîne.
+	 */
+	static String identifyLanguage(String inString) {
+		final String theResult;
+		synchronized (TtsLangData.IDENTIFIER) {
+			final String theNutchGuessedLanguage = TtsLangData.IDENTIFIER.identify(inString);
+			final String defaultIsocode = TtsLangData.ISOCODE.get(theNutchGuessedLanguage);
+			if (defaultIsocode != null) {
+				theResult = defaultIsocode;
+			} else {
+				theResult = theNutchGuessedLanguage;
+			}
+
+		}
+		return theResult;
+	}
+
+
+	/**
 	 * Finds all the languages for the given user
 	 * 
 	 * @return a list filled with LangData
Index: net/violet/platform/applications/FacebookHandler.java
===================================================================
--- net/violet/platform/applications/FacebookHandler.java	(révision 0)
+++ net/violet/platform/applications/FacebookHandler.java	(révision 21963)
@@ -0,0 +1,81 @@
+package net.violet.platform.applications;
+
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.Map;
+
+import net.violet.platform.api.callers.APICaller;
+import net.violet.platform.api.exceptions.InvalidSettingException;
+import net.violet.platform.api.exceptions.MissingSettingException;
+import net.violet.platform.dataobjects.ApplicationData;
+import net.violet.platform.dataobjects.SubscriptionData;
+import net.violet.platform.dataobjects.VObjectData;
+import net.violet.platform.feeds.FeedsTools;
+
+public class FacebookHandler implements ApplicationHandler {
+
+	public static final int NB_NEWS_TO_READ = 10;
+
+	public static final String ETAG = "etag";
+	public static final String LAST_MODIFIED = "last_modified";
+	public static final String LAST_ENTRY_ID = "last_entry_id";
+
+	public static final String URL = "url";
+
+	private final ApplicationData application;
+
+	protected FacebookHandler(ApplicationData application) {
+		this.application = application;
+	}
+
+	public SubscriptionData create(VObjectData object, Map<String, Object> settings) {
+		return SubscriptionData.create(this.application, object, getSettings(null, settings));
+	}
+
+	public void update(SubscriptionData subscription, Map<String, Object> settings) {
+		subscription.setSettings(getSettings(subscription, settings));
+	}
+
+	private Map<String, Object> getSettings(SubscriptionData subscription, Map<String, Object> settings) {
+		// caution here : we have to keep the three internal settings used to analyze the feed
+		final Map<String, Object> oldSettings = ((subscription != null) && subscription.isValid()) ? subscription.getSettings() : Collections
+				.<String, Object> emptyMap();
+
+		final Map<String, Object> theNewSettings = new HashMap<String, Object>(oldSettings);
+		theNewSettings.putAll(settings);
+		return theNewSettings;
+	}
+
+	public void checkSettings(VObjectData object, Map<String, Object> settings) throws MissingSettingException, InvalidSettingException {
+
+		if (settings.size() > 1) {
+			throw new InvalidSettingException("All settings", "too much settings");
+		}
+
+		final Object urlSetting = settings.get(FacebookHandler.URL);
+		if (urlSetting == null) {
+			throw new MissingSettingException(FacebookHandler.URL);
+		}
+
+		if (!FeedsTools.isFeedValid(urlSetting.toString(), null, null)) {
+			throw new InvalidSettingException(FacebookHandler.URL, urlSetting.toString());
+		}
+
+	}
+
+	public void delete(SubscriptionData subscription) {
+		subscription.delete();
+	}
+
+	public Map<String, Object> getUISettings(SubscriptionData subscription, APICaller inApiCaller) {
+		final Map<String, Object> theSettings = new HashMap<String, Object>(subscription.getSettings());
+		theSettings.remove(FacebookHandler.ETAG);
+		theSettings.remove(FacebookHandler.LAST_ENTRY_ID);
+		theSettings.remove(FacebookHandler.LAST_MODIFIED);
+		return theSettings;
+	}
+
+	public String getSubscriptionInformation(SubscriptionData subscription) {
+		return subscription.getSettings().get(FacebookHandler.URL).toString();
+	}
+}
Index: net/violet/platform/applications/ApplicationHandlerManager.java
===================================================================
--- net/violet/platform/applications/ApplicationHandlerManager.java	(révision 21962)
+++ net/violet/platform/applications/ApplicationHandlerManager.java	(copie de travail)
@@ -29,6 +29,7 @@
 		theMap.put(Application.NativeApplication.CLOCK, new ClockHandler());
 		theMap.put(Application.NativeApplication.GMAIL, new GmailTwitterHandler(ApplicationData.getData(Application.NativeApplication.GMAIL.getApplication())));
 		theMap.put(Application.NativeApplication.TWITTER, new GmailTwitterHandler(ApplicationData.getData(Application.NativeApplication.TWITTER.getApplication())));
+		theMap.put(Application.NativeApplication.FACEBOOK, new FacebookHandler(ApplicationData.getData(Application.NativeApplication.FACEBOOK.getApplication())));
 		theMap.put(Application.NativeApplication.MAIL, new MailAlertHandler());
 		theMap.put(Application.NativeApplication.MOOD, new MoodHandler());
 		theMap.put(Application.NativeApplication.PODCAST_FULL, new VActionFullHandler(ApplicationData.getData(Application.NativeApplication.PODCAST_FULL.getApplication())));
Index: net/violet/platform/feeds/crawlers/FacebookCrawler.java
===================================================================
--- net/violet/platform/feeds/crawlers/FacebookCrawler.java	(révision 0)
+++ net/violet/platform/feeds/crawlers/FacebookCrawler.java	(révision 21963)
@@ -0,0 +1,124 @@
+package net.violet.platform.feeds.crawlers;
+
+import java.net.URISyntaxException;
+import java.text.ParseException;
+import java.util.Collections;
+import java.util.List;
+import java.util.Map;
+
+import net.violet.db.RecordWalker;
+import net.violet.platform.applications.FacebookHandler;
+import net.violet.platform.applications.GmailTwitterHandler;
+import net.violet.platform.datamodel.Application;
+import net.violet.platform.datamodel.Feed;
+import net.violet.platform.datamodel.Subscription;
+import net.violet.platform.datamodel.factories.Factories;
+import net.violet.platform.datamodel.factories.ServiceFactory.SERVICE;
+import net.violet.platform.dataobjects.SubscriptionData;
+import net.violet.platform.dataobjects.VObjectData;
+import net.violet.platform.feeds.analyzers.FeedsAnalyzer;
+import net.violet.platform.feeds.analyzers.UriBasedAnalyzer;
+import net.violet.platform.feeds.processors.DetectTitleProcessor;
+import net.violet.platform.feeds.processors.EntryProcessor;
+import net.violet.platform.feeds.senders.EntrySender;
+import net.violet.platform.feeds.senders.InstantSender;
+import net.violet.platform.httpclient.Connection;
+import net.violet.platform.httpclient.ConnectionConfiguration;
+import net.violet.platform.httpclient.ConnectionException;
+import net.violet.platform.message.MessageSignature;
+
+import org.apache.log4j.Logger;
+
+import com.sun.syndication.feed.synd.SyndEntry;
+
+public abstract class FacebookCrawler extends FeedCrawler<Subscription> {
+
+	private static final Logger LOGGER = Logger.getLogger(FacebookCrawler.class);
+
+	private static final Application APPLICATION = Application.NativeApplication.FACEBOOK.getApplication();
+	private static final MessageSignature SIGNATURE = new MessageSignature(SERVICE.FACEBOOK.getService());
+
+	public FacebookCrawler(String[] inArgs) {
+		super(inArgs, Feed.Type.FACEBOOK);
+	}
+
+	@Override
+	protected void process() {
+		Factories.SUBSCRIPTION.walkByApplicationAndOnlineObjects(FacebookCrawler.APPLICATION, new RecordWalker<Subscription>() {
+
+			public void process(Subscription subscription) {
+				try {
+					processElement(subscription);
+				} catch (final InterruptedException e) {
+					FacebookCrawler.LOGGER.fatal(e, e);
+				}
+			}
+		});
+
+		try {
+			waitTermination();
+		} catch (final InterruptedException e) {
+			FacebookCrawler.LOGGER.fatal(e, e);
+		}
+	}
+
+	@Override
+	protected boolean isElementProcessable(Subscription element) {
+		return SubscriptionData.getData(element).getObject().isCurrentlyRecipient();
+	}
+
+	@Override
+	protected ConnectionConfiguration getConnectionConfiguration(Subscription element) throws ConnectionException {
+		final Map<String, Object> settings = element.getSettings();
+		if (settings.containsKey(FacebookHandler.URL)) {
+			try {
+				final ConnectionConfiguration config = new ConnectionConfiguration(settings.get(FacebookHandler.URL).toString());
+
+				if (settings.get(GmailTwitterHandler.ETAG) != null) {
+					config.addEtag(settings.get(GmailTwitterHandler.ETAG).toString());
+				}
+
+				if (settings.get(GmailTwitterHandler.LAST_MODIFIED) != null) {
+					config.addLastModified(settings.get(GmailTwitterHandler.LAST_MODIFIED).toString());
+				}
+
+				return config;
+			} catch (final URISyntaxException e) {
+				throw new ConnectionException(e);
+			} catch (final ParseException e) {
+				// failed to parse the date, no need to keep this invalid setting anymore
+				settings.remove(GmailTwitterHandler.LAST_MODIFIED);
+				element.setSettings(settings);
+				throw new ConnectionException(e);
+			}
+		}
+
+		return null;
+	}
+
+	@Override
+	protected FeedsAnalyzer getFeedsAnalyzer(Subscription element) {
+		return new UriBasedAnalyzer(FacebookHandler.NB_NEWS_TO_READ, String.valueOf(element.getSettings().get(GmailTwitterHandler.LAST_ENTRY_ID)));
+	}
+
+	@Override
+	protected EntryProcessor getEntryProcessor(Subscription element) {
+		return DetectTitleProcessor.getInstance();
+	}
+
+	@Override
+	protected EntrySender getEntrySender(Subscription element) {
+		return new InstantSender(Collections.singletonList(VObjectData.getData(element.getObject())), FacebookCrawler.SIGNATURE,
+				FacebookCrawler.APPLICATION.getName());
+	}
+
+	@Override
+	protected void updateElement(Subscription element, List<SyndEntry> newEntries, Connection connection) {
+		final Map<String, Object> settings = element.getSettings();
+		settings.put(GmailTwitterHandler.LAST_MODIFIED, connection.getLastModified());
+		settings.put(GmailTwitterHandler.ETAG, connection.getEtag());
+		settings.put(GmailTwitterHandler.LAST_ENTRY_ID, newEntries.get(newEntries.size() - 1).getUri());
+		element.setSettings(settings);
+	}
+
+}
Index: net/violet/platform/feeds/processors/DetectTitleProcessor.java
===================================================================
--- net/violet/platform/feeds/processors/DetectTitleProcessor.java	(révision 0)
+++ net/violet/platform/feeds/processors/DetectTitleProcessor.java	(révision 21963)
@@ -0,0 +1,49 @@
+package net.violet.platform.feeds.processors;
+
+import java.util.Collections;
+
+import net.violet.platform.datamodel.Files;
+import net.violet.platform.datamodel.TtsVoice;
+import net.violet.platform.datamodel.factories.Factories;
+import net.violet.platform.dataobjects.TtsLangData;
+import net.violet.platform.voice.TTSServices;
+
+import com.sun.syndication.feed.synd.SyndEntry;
+
+/**
+ * This is a very simple EntryProcessor. It only generates one file which is created by giving the title to the
+ * TTS engine. The title is synthetized as an audio file which is returned.
+ */
+public class DetectTitleProcessor implements EntryProcessor {
+
+	private static final DetectTitleProcessor INSTANCE = new DetectTitleProcessor();
+
+	public static DetectTitleProcessor getInstance() {
+		return DetectTitleProcessor.INSTANCE;
+	}
+
+	protected DetectTitleProcessor() {}
+
+	/**
+	 * Detects the language thanks to text, who will be synthetized, sends it to the TTS engine and returned
+	 * the generated file.
+	 * If an error happend while calling the TTS Engine a ProcessingException is thrown.
+	 */
+	public ProcessedEntry processEntry(SyndEntry entry) throws ProcessingException {
+		final String textToConvert = entry.getTitle();
+
+		if ((textToConvert != null) && (textToConvert.length() > 0)) {
+			final TtsVoice theVoice = Factories.TTSVOICE.findByLang(TtsLangData.getIdentifyLanguage(textToConvert).getReference());
+			if (theVoice == null) {
+				throw new IllegalArgumentException(" This given text is not recognized : " + textToConvert);
+			}
+			final Files resultFiles = TTSServices.getInstance().postTTS(textToConvert, true, true, theVoice);
+			if (resultFiles != null) {
+				return new ProcessedEntry(entry, Collections.singletonList(resultFiles));
+			}
+			throw new ProcessingException("Failed to synthetize : [" + textToConvert + "] with voice : " + theVoice.getName());
+		}
+
+		throw new ProcessingException("Failed to synthetize : [" + textToConvert + "]");
+	}
+}
Index: net/violet/platform/datamodel/Application.java
===================================================================
--- net/violet/platform/datamodel/Application.java	(révision 21962)
+++ net/violet/platform/datamodel/Application.java	(copie de travail)
@@ -49,7 +49,7 @@
 	};
 
 	enum NativeApplication {
-		RSS_FULL("net.violet.rssfull"), PODCAST_FULL("net.violet.podcastfull"), WEATHER("net.violet.weather"), AIR("net.violet.air"), BILAN("net.violet.bilan"), BOURSE_FREE("net.violet.bourse"), BOURSE_FULL("net.violet.boursefull"), MOOD("net.violet.mood"), RSS_FREE("net.violet.rss"), TRAFIC("net.violet.trafic"), PODCAST_FREE("net.violet.podcast"), MAIL("net.violet.mail"), GMAIL("net.violet.gmail"), TWITTER("net.violet.twitter"), CLOCK("net.violet.clock"), TAICHI("net.violet.taichi"), WEBRADIO("net.violet.webradio"), ALARM_CLOCK("net.violet.alarm"), REMINDER("net.violet.reminder"), EARS_COMMUNION("net.violet.earscommunion"), INBOX("net.violet.js.mailbox");
+		RSS_FULL("net.violet.rssfull"), PODCAST_FULL("net.violet.podcastfull"), WEATHER("net.violet.weather"), AIR("net.violet.air"), BILAN("net.violet.bilan"), BOURSE_FREE("net.violet.bourse"), BOURSE_FULL("net.violet.boursefull"), MOOD("net.violet.mood"), RSS_FREE("net.violet.rss"), TRAFIC("net.violet.trafic"), PODCAST_FREE("net.violet.podcast"), MAIL("net.violet.mail"), FACEBOOK("net.violet.facebook"), GMAIL("net.violet.gmail"), TWITTER("net.violet.twitter"), CLOCK("net.violet.clock"), TAICHI("net.violet.taichi"), WEBRADIO("net.violet.webradio"), ALARM_CLOCK("net.violet.alarm"), REMINDER("net.violet.reminder"), EARS_COMMUNION("net.violet.earscommunion"), INBOX("net.violet.js.mailbox");
 
 		private static final Map<Application, NativeApplication> APPLICATION_NATIVE_APP = new HashMap<Application, NativeApplication>() {
 
Index: net/violet/platform/datamodel/factories/ServiceFactory.java
===================================================================
--- net/violet/platform/datamodel/factories/ServiceFactory.java	(révision 21962)
+++ net/violet/platform/datamodel/factories/ServiceFactory.java	(copie de travail)
@@ -13,6 +13,7 @@
 		PODCAST("podcast"),
 		CALLBACK("callback"),
 		TWITTER("twitter"),
+		FACEBOOK("facebook"),
 		FILCKR("flickr"),
 		GMAIL("gmail"),
 		LIVE_MESH("liveMesh");
Index: net/violet/platform/datamodel/Feed.java
===================================================================
--- net/violet/platform/datamodel/Feed.java	(révision 21962)
+++ net/violet/platform/datamodel/Feed.java	(copie de travail)
@@ -7,7 +7,7 @@
 public interface Feed extends Record<Feed> {
 
 	enum Type {
-		RSS("RSS"), PODCAST("PODCAST"), GROUP("GROUP"), GMAIL_TWITTER("GMAIL:TWITTER");
+		RSS("RSS"), PODCAST("PODCAST"), GROUP("GROUP"), GMAIL_TWITTER("GMAIL:TWITTER"), FACEBOOK("FACEBOOK");
 
 		private final String label;
 
Index: scripts/crawlersLaunchList-angora_5556
===================================================================
--- scripts/crawlersLaunchList-angora_5556	(révision 21962)
+++ scripts/crawlersLaunchList-angora_5556	(copie de travail)
@@ -2,4 +2,5 @@
 NewRssFull
 NewGmail
 NewTwitter
-CachePulse
\ No newline at end of file
+CachePulse
+Facebook
Index: scripts/crawlerctl
===================================================================
--- scripts/crawlerctl	(révision 21962)
+++ scripts/crawlerctl	(copie de travail)
@@ -118,6 +118,10 @@
 	  	crawlerclass=net.violet.platform.feeds.crawlers.GmailCrawler
 	    argline="-d 60000 -s 10 -a 5 -c 5"
 	    ;;
+	    Facebook)
+	    	crawlerclass=net.violet.platform.feeds.crawlers.FacebookCrawler
+		argline="-d 1200000 -s 10 -a 5 -c 5"
+	    ;;
 	    PodcastFull)
 	    crawlerclass=net.violet.platform.daemons.crawlers.vaction.CrawlerPodcastFull
 	    argline="-d 1200000 -s 10 -a 5 -c 5"
Index: xml/applications/sched_facebook.xml
===================================================================
--- xml/applications/sched_facebook.xml	(révision 0)
+++ xml/applications/sched_facebook.xml	(révision 21963)
@@ -0,0 +1,25 @@
+<map>
+<scheduling_masks>
+	<list>
+	<item>
+		<map>
+			<hw_type>"violet.nabaztag"</hw_type>
+			<scheduling_type>"NewContent"</scheduling_type>
+			<maximum>1</maximum>
+			<minimum>1</minimum>
+		</map>
+	</item>
+
+	<item>
+		<map>
+			<hw_type>"violet.daldal"</hw_type>
+			<scheduling_type>"NewContent"</scheduling_type>
+			<minimum>1</minimum>
+			<maximum>1</maximum>
+		</map>
+	</item>
+
+	</list>
+
+</scheduling_masks>
+</map>
\ No newline at end of file
Index: xml/applications/settings_facebook.xml
===================================================================
--- xml/applications/settings_facebook.xml	(révision 0)
+++ xml/applications/settings_facebook.xml	(révision 21963)
@@ -0,0 +1,13 @@
+<map>
+<settings>
+<list>
+	<item>
+	<map>
+		<type>"InputLine"</type>
+		<key>"url"</key>
+		<label>"srv_rss/title_URL"</label>
+	</map>
+	</item>
+</list>
+</settings>
+</map>
\ No newline at end of file
