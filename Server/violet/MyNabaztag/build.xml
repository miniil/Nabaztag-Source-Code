	<project name="MyNabaztag" default="compile.project">
	
	<!-- ===================== Property Definitions =========================== -->
	
	<property file="build.properties" />
	
	<!-- ==================== File and Directory Names ======================== -->
	
	<property name="lib.dir" value="${basedir}/lib" description="Location of the project libraries"/>
	<property name="src.dir" value="${basedir}/net" description="Location of the project sources"/>
	<property name="config.dir" value="${basedir}/config" description="Location of the configuration files"/>
	<property name="build.dir" value="${basedir}/build" description="" />
	<property name="web.dir" value="${build.dir}/WEB-INF" description="" />
	<property name="web.conf.dir" value="${web.dir}/conf" description="" />
	<property name="classes.dest" value="${web.dir}/classes" description="Destination directory for project classes"/>
	<property name="test.src.dir" value="${basedir}/test" description="Location of the test sources"/>
	<property name="test.classes.dest" value="${basedir}/build_test/classes" description="Destination directory for tests classes"/>
	<property name="test.report.dir" value="${basedir}/build_test/reports/junit" />
	
	<property name="tomcat.lib" value="${catalina.home}/common/lib" />
	<property name="deploy.war" value="${build.dir}/myNabaztag.war" />
	<property name="web.lib" value="${web.dir}/lib" />
	
	<tstamp>
		<format property="now" pattern="yyyy.MM.dd_kk:mm:ss" locale="en" />
	</tstamp>
	
	<path id="svn.classpath">
		<pathelement location="${COMMONDIR}/lib/svnant.jar" />
		<pathelement location="${COMMONDIR}/lib/svnClientAdapter.jar" />
		<pathelement location="${COMMONDIR}/lib/svnjavahl.jar" />
	</path>
	
	<target name="get.hostname">
		    <property environment="env"/>
			<condition property="hostname" value="${env.HOSTNAME}">
				<isset property="env.HOSTNAME"/>
			</condition>
			<condition property="hostname" value="${env.HOST}">
				<isset property="env.HOST"/>
			</condition>
			<exec executable="hostname" outputProperty="hostname" />
		</target>
	
		<target name="set.server" unless="server" depends="get.hostname" description="Sets the server prefix according to the current machine.">
			<condition property="server" value="PROD">
				<or>
					<equals arg1="${hostname}" arg2="angora" trim="true" casesensitive="false" />
					<equals arg1="${hostname}" arg2="beveren" trim="true" casesensitive="false" />
					<equals arg1="${hostname}" arg2="hotot" trim="true" casesensitive="false" />
					<equals arg1="${hostname}" arg2="satin" trim="true" casesensitive="false" />
					<equals arg1="${hostname}" arg2="thuringue" trim="true" casesensitive="false" />
					<equals arg1="${hostname}" arg2="zibeline" trim="true" casesensitive="false" />
					<equals arg1="${hostname}" arg2="bouscat" trim="true" casesensitive="false" />
					<equals arg1="${hostname}" arg2="saxe" trim="true" casesensitive="false" />
					<equals arg1="${hostname}" arg2="orylag" trim="true" casesensitive="false" />
					<equals arg1="${hostname}" arg2="martre" trim="true" casesensitive="false" />
					<equals arg1="${hostname}" arg2="renard" trim="true" casesensitive="false" />
					<equals arg1="${hostname}" arg2="havane" trim="true" casesensitive="false" />
					<equals arg1="${hostname}" arg2="parapluie" trim="true" casesensitive="false" />
					<equals arg1="${hostname}" arg2="flandres" trim="true" casesensitive="false" />
				</or>
			</condition>
				
			<condition property="prod">
				<isset property="server"/>
			</condition>
				
			<condition property="server" value="S">
				<equals arg1="${hostname}" arg2="silence" trim="true" casesensitive="false" />
			</condition>
					
			<condition property="server" value="PP">
				<or>
					<equals arg1="${hostname}" arg2="mauve" trim="true" casesensitive="false" />
					<equals arg1="${hostname}" arg2="pourpre" trim="true" casesensitive="false" />
					<equals arg1="${hostname}" arg2="prune" trim="true" casesensitive="false" />
					<equals arg1="${hostname}" arg2="mug" trim="true" casesensitive="false" />
					<equals arg1="${hostname}" arg2="lavande" trim="true" casesensitive="false" />
				</or>
			</condition>
				
			<condition property="server" value="">
				<not>
					<isset property="server"/>
				</not>
			</condition>
		</target>
	
	<!-- load the svn task -->
	<taskdef resource="svntask.properties" classpathref="svn.classpath" />
	
	
	<target name="svn.up">
		<svn username="${svn.username}" password="${svn.password}">
			<update dir="${basedir}" />
		</svn>
	</target>
	
	<!-- ==================== Clean Target ==================================== -->
	
	<target name="clean" description="Delete old classes...">
		<delete dir="${classes.dest}" />
		<delete dir="${test.classes.dest}" />
	</target>
	
	
	<!-- ==================== Compile Target ================================== -->
	
	<path id="Xlib.path" >
		<fileset dir="${COMMONDIR}/lib" excludes="${exclude.from.classpath}"/>
		<fileset dir="${COMMONDEVDIR}/lib" excludes="${exclude.from.classpath}"/>
		<fileset dir="${OSDIR}/lib" excludes="${exclude.from.classpath}"/>
		<fileset dir="${DBENGINEDIR}/lib" excludes="${exclude.from.classpath}"/>
	</path>
		
	<target name="OS.compile" description="gets the OS built">
		<echo message="===== START BUILDING OS =====" />
	    <ant antfile="${OSDIR}/build.xml" inheritAll="false" target="up.and.compile" >
	    	<property name="classes.dest" value="${classes.dest}"/>
	    	<property name="COMMONDIR" value="${COMMONDIR}"/>
	    	<property name="PROBESDIR" value="${PROBESDIR}"/>
	    	<property name="DBENGINEDIR" value="${DBENGINEDIR}"/>
	   	</ant>	
	</target>
	
	<target name="OS.compile.test" description="gets the OS built">
		<echo message="===== START BUILDING OS TESTS =====" />
	    <ant antfile="${OSDIR}/build.xml" inheritAll="false" target="compile.tests" >
	    	<property name="test.classes.dest" value="${test.classes.dest}"/>
	    	<property name="COMMONDIR" value="${COMMONDIR}"/>
	    	<property name="PROBESDIR" value="${PROBESDIR}"/>
	    	<property name="DBENGINEDIR" value="${DBENGINEDIR}"/>
	   	</ant>	
	</target>
	
	<target name="common.compile" description="gets the common dev built">
		<echo message="===== START BUILDING CommonDev =====" />
	    <ant antfile="${COMMONDEVDIR}/build.xml" inheritAll="false" target="up.and.compile">
	    	<property name="classes.dest" value="${classes.dest}"/>
	    	<property name="lib.dir" value="${OS.lib}" />
		</ant>
	</target>
	
	
	<target name="compile.project" depends="clean,set.server, OS.compile, common.compile, copy.config" description="Compile Java sources">
		<echo message="===== START BUILDING MyNabaztag =====" />
		<javac srcdir="${src.dir}" destdir="${classes.dest}" debug="on" nowarn="on" >
			<classpath>
				<fileset dir="${lib.dir}" excludes="${exclude.from.classpath}"/>
				<path refid="Xlib.path" />
			</classpath>
		</javac>
	</target>
		
	<target name="compile.tests" depends="clean,compile.project, OS.compile.test">		
		<javac srcdir="${test.src.dir}" destdir="${test.classes.dest}" debug="on" nowarn="on" >
			<classpath>
				<fileset dir="${lib.dir}" excludes="${exclude.from.classpath}"/>
				<path refid="Xlib.path" />
				<pathelement location="${classes.dest}" />
			</classpath>
		</javac>
	</target>
	
	<target name="copy.config" depends="set.server">
		<!-- Copie des fichiers de configuration -->
		<echo message="Copie des fichiers de configuration '${server}'"/>
		<!-- We need to override the web.xml with MyNabaztag's -->
		<copy file="${config.dir}/my.constante.properties${server}" tofile="${classes.dest}/my.constante.properties" overwrite="true" />
		<copy todir="${classes.dest}" overwrite="true">
			<fileset dir="${config.dir}" casesensitive="yes" includes="my.constante-*.properties"/>
		</copy>
		<copy file="${config.dir}/web${server}.xml" tofile="${web.dir}/web.xml" overwrite="true" />
	</target>
	
	<target name="copy.resources">
		<!-- Copie des fichiers non-java dans build/WEB-INF/classes -->
		<copy todir="${classes.dest}/net" includeEmptyDirs="false">
			<fileset dir="${basedir}/net">
				<exclude name="**/*.java"/>
			</fileset>
		</copy>
	</target>
	
	<!-- ==================== Compilation des JSP =============================== -->
	<target name="compile.jsp" depends="compile.project" >
		<taskdef classname="org.apache.jasper.JspC" name="jasper2">
			<classpath id="jspc.classpath">
				<fileset dir="${catalina.home}/bin">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${catalina.home}/server/lib">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${tomcat.lib}">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${java.home}/../lib/">
					<include name="tools.jar" />
				</fileset>
				<fileset dir="${lib.dir}" excludes="${exclude.from.classpath}"/>
			</classpath>
		</taskdef>
	
		<delete dir="${web.dir}/src/" />
		<mkdir dir="${web.dir}/classes" />
		<mkdir dir="${web.dir}/src" />
	
		<jasper2 validateXml="false" uriroot="${build.dir}"
		webXmlFragment="${web.dir}/generated_web.xml"
		addWebXmlMappings="true"
		outputDir="${web.dir}/src" />
	
		<javac srcdir="${web.dir}/src" destdir="${web.dir}/classes" debug="on" deprecation="on" excludes="**/*.smap">
			<classpath>
				<fileset dir="${lib.dir}" excludes="${exclude.from.classpath}"/>
				<!--fileset dir="${OS.lib}" excludes="${exclude.from.classpath}"/-->
				<pathelement location="${classes.dest}" />
				<pathelement location="${catalina.home}/common/classes" />
				<fileset dir="${tomcat.lib}">
					<include name="*.jar" />
				</fileset>
				<pathelement location="${catalina.home}/shared/classes" />
				<fileset dir="${catalina.home}/shared/lib">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${catalina.home}/bin">
					<include name="*.jar" />
				</fileset>
			</classpath>
			<include name="**" />
			<exclude name="tags/**" />
			<exclude name="**/inc_005fjavascripts_jsp.java" />
			<exclude name="**/inc_005fheader_jsp.java" />
			<exclude name="**/inc_005fcss_jsp.java" />
			<exclude name="**/inc_005fnablifeMenu_jsp.java" />
		</javac>
	</target>
	
	<!-- ==================== cssy & jsy ================================== -->
	
	<!-- utilisé pour packager les javascripts et les CSS -->
	<property name="JSY_SRC_DIR"            value="${basedir}/build/include_js" />
	<property name="JSY_DIST_DIR"           value="${basedir}/build/include_js/dist" />
	<property name="CSSY_SRC_DIR"           value="${basedir}/build/include_css" />
	<property name="CSSY_DIST_DIR"          value="${basedir}/build/include_css/dist" />	
	<property name="JSY_TMP_FILE"           value="${basedir}/build/tmp.js.css.txt" />   
	<property name="JSY_CONFTOOLS_FILE_MIN" value="${JSY_DIST_DIR}/nabaztag.conftools.js" />    
	<property name="JSY_NABAZTAG_FILE_MIN"  value="${JSY_DIST_DIR}/nabaztag.common.js" />
	<property name="JSY_JQUERY_FILES_MIN"   value="${JSY_DIST_DIR}/nabaztag.jquery.js" />
	<property name="JSY_NABLIFE_FILES_MIN"  value="${JSY_DIST_DIR}/nabaztag.nablife.js" />
	<property name="JSY_HOME_FILES_MIN"     value="${JSY_DIST_DIR}/nabaztag.home.js" />
	<property name="JSY_TERRIER_FILES_MIN"  value="${JSY_DIST_DIR}/nabaztag.terrier.js" />
	<property name="CSSY_BLUE_FILES_MIN"    value="${CSSY_DIST_DIR}/nabaztag.layout_blue.css" />
	<property name="CSSY_GREEN_FILES_MIN"   value="${CSSY_DIST_DIR}/nabaztag.layout_green.css" />
	<property name="CSSY_ORANGE_FILES_MIN"  value="${CSSY_DIST_DIR}/nabaztag.layout_orange.css" />
	<property name="CSSY_PINK_FILES_MIN"    value="${CSSY_DIST_DIR}/nabaztag.layout_pink.css" />
	<property name="CSSY_VIOLET_FILES_MIN"  value="${CSSY_DIST_DIR}/nabaztag.layout_violet.css" />
	<property name="CSSY_MODULES_FILES_MIN" value="${CSSY_DIST_DIR}/nabaztag.modules.css" />
	<property name="CSSY_LAYOUT_FILES_MIN"  value="${CSSY_DIST_DIR}/nabaztag.layout.css" />
	<property name="CSSY_PARTS_FILES_MIN"   value="${CSSY_DIST_DIR}/nabaztag.parts.css" />
	<property name="JSY_BUILD_DIR"          value="${basedir}/js-tools/" />
	 
		<target name="cssy_nabaztag" description="Main CSS Files for my.nabaztag.com using Yahoo Compressor">
		<echo message="===== CSS =====" />
	
		<delete verbose="true">
			<fileset dir="${CSSY_DIST_DIR}" includes="*.*"/>
		</delete>
				
		<mkdir dir="${CSSY_DIST_DIR}" />
	
		<!-- CSS de base ***************************************************************************** -->
		
		<!-- création du css des modules -->
		<echo message="Minimizing to ${CSSY_MODULES_FILES_MIN}" />
			<concat destfile="${JSY_TMP_FILE}">
				<fileset dir="${CSSY_SRC_DIR}/modules/" includes="*.css" />
			</concat>
			<java jar="${JSY_BUILD_DIR}/yuicompressor-2.2.5.jar" fork="true">
	            <arg line=" --type css -o ${CSSY_MODULES_FILES_MIN} ${JSY_TMP_FILE}"/>
	        </java>	
	
		<!-- création du css du layout principal -->
		<echo message="Minimizing to ${CSSY_LAYOUT_FILES_MIN}" />
			<concat destfile="${JSY_TMP_FILE}">
				<fileset dir="${CSSY_SRC_DIR}/layout/" includes="*.css" />
			</concat>
			<java jar="${JSY_BUILD_DIR}/yuicompressor-2.2.5.jar" fork="true">
	            <arg line=" --type css -o ${CSSY_LAYOUT_FILES_MIN} ${JSY_TMP_FILE}"/>
	        </java>	
	
		<!-- création du css des differentes parties du site -->
		<echo message="Minimizing to ${CSSY_PARTS_FILES_MIN}" />
			<concat destfile="${JSY_TMP_FILE}">
				<fileset dir="${CSSY_SRC_DIR}/part_layout/" includes="*.css" />
			</concat>
			<java jar="${JSY_BUILD_DIR}/yuicompressor-2.2.5.jar" fork="true">
	            <arg line=" --type css -o ${CSSY_PARTS_FILES_MIN} ${JSY_TMP_FILE}"/>
	        </java>	
	
	
		
		<!-- création des TEMPLATES DE COULEURS ***************************************************************************** -->
	
		<!-- création du fichier template BLUE -->
		<echo message="Minimizing to ${CSSY_BLUE_FILES_MIN}" />
			<concat destfile="${JSY_TMP_FILE}">
				<fileset dir="${CSSY_SRC_DIR}/layout_blue/"  >
					<include name="*.css"/>
					<exclude name="layout.css"/>
				</fileset>
			</concat>
			<java jar="${JSY_BUILD_DIR}/yuicompressor-2.2.5.jar" fork="true">
	            <arg line=" --type css -o ${CSSY_BLUE_FILES_MIN} ${JSY_TMP_FILE}"/>
	        </java>	
	
		<!-- création du fichier template GREEN -->
		<echo message="Minimizing to ${CSSY_GREEN_FILES_MIN}" />
			<concat destfile="${JSY_TMP_FILE}">	
				<fileset dir="${CSSY_SRC_DIR}/layout_green/"  >
					<include name="*.css"/>
					<exclude name="layout.css"/>
				</fileset>
			</concat>
			<java jar="${JSY_BUILD_DIR}/yuicompressor-2.2.5.jar" fork="true">
	            <arg line=" --type css -o ${CSSY_GREEN_FILES_MIN} ${JSY_TMP_FILE}"/>
	        </java>	
	
		<!-- création du fichier template ORANGE -->
		<echo message="Minimizing to ${CSSY_ORANGE_FILES_MIN}" />
			<concat destfile="${JSY_TMP_FILE}">
				<fileset dir="${CSSY_SRC_DIR}/layout_orange/"  >
					<include name="*.css"/>
					<exclude name="layout.css"/>
				</fileset>
			</concat>
			<java jar="${JSY_BUILD_DIR}/yuicompressor-2.2.5.jar" fork="true">
	            <arg line=" --type css -o ${CSSY_ORANGE_FILES_MIN} ${JSY_TMP_FILE}"/>
	        </java>	
	
		<!-- création du fichier template PINK -->
		<echo message="Minimizing to ${CSSY_PINK_FILES_MIN}" />
			<concat destfile="${JSY_TMP_FILE}">
				<fileset dir="${CSSY_SRC_DIR}/layout_pink/"  >
					<include name="*.css"/>
					<exclude name="layout.css"/>
				</fileset>
			</concat>
			<java jar="${JSY_BUILD_DIR}/yuicompressor-2.2.5.jar" fork="true">
	            <arg line=" --type css -o ${CSSY_PINK_FILES_MIN} ${JSY_TMP_FILE}"/>
	        </java>	
	
		<!-- création du fichier template VIOLET -->
		<echo message="Minimizing to ${CSSY_VIOLET_FILES_MIN}" />
			<concat destfile="${JSY_TMP_FILE}">
				<fileset dir="${CSSY_SRC_DIR}/layout_violet/"  >
					<include name="*.css"/>
					<exclude name="layout.css"/>
				</fileset>
			</concat>
			<java jar="${JSY_BUILD_DIR}/yuicompressor-2.2.5.jar" fork="true">
	            <arg line=" --type css -o ${CSSY_VIOLET_FILES_MIN} ${JSY_TMP_FILE}"/>
	        </java>	
		
		<echo message="===== CSS END =====" />
		
	</target>
	
	<target name="jsy_nabaztag" description="Main JS File for my.nabaztag.com using Yahoo Compressor">
		<echo message="===== JAVASCRIPTS =====" />
		
		<delete verbose="true">
			<fileset dir="${JSY_DIST_DIR}" includes="*.*"/>
		</delete>
		
		<mkdir dir="${JSY_DIST_DIR}" />
	
		<!-- création du fichier "conftools" -->
		<echo message="Building ${JSY_CONFTOOLS_FILE_MIN}" />
		<concat destfile="${JSY_TMP_FILE}">
			<fileset dir="${JSY_SRC_DIR}" includes="conftools/*.js" />
		</concat>
		<echo message="Minimizing to ${JSY_CONFTOOLS_FILE_MIN}" />		
		<java jar="${JSY_BUILD_DIR}/yuicompressor-2.2.5.jar" fork="true">
	        <arg line=" --type js -o ${JSY_CONFTOOLS_FILE_MIN} ${JSY_TMP_FILE}"/>
	    </java>		
	
	
		<!-- création du fichier jquery avec ces plugins -->
		<echo message="Building ${JSY_JQUERY_FILES_MIN}" />
		<concat destfile="${JSY_TMP_FILE}">
			<fileset dir="${JSY_SRC_DIR}" includes="jQuery/jquery-?.?*.js" />
			<fileset dir="${JSY_SRC_DIR}" includes="jQuery/plugins/*.js" />
		</concat>
		<echo message="Minimizing to ${JSY_JQUERY_FILES_MIN}" />	
	    <java jar="${JSY_BUILD_DIR}/yuicompressor-2.2.5.jar" fork="true">
	        <arg line=" --type js -o ${JSY_JQUERY_FILES_MIN} ${JSY_TMP_FILE}"/>
	    </java>	
	
		<!-- création du fichier de scripts nabaztag.com -->
		<echo message="Building ${JSY_NABAZTAG_FILE_MIN}" />
		<concat destfile="${JSY_TMP_FILE}">
			<fileset dir="${JSY_SRC_DIR}" includes="common/*.js" />
		</concat>
		<echo message="Minimizing to ${JSY_NABAZTAG_FILE_MIN}" />	
	    <java jar="${JSY_BUILD_DIR}/yuicompressor-2.2.5.jar" fork="true">
	        <arg line=" --type js -o ${JSY_NABAZTAG_FILE_MIN} ${JSY_TMP_FILE}"/>
	    </java>	
	
	
		<!-- création du fichier myHome -->
		<echo message="Building ${JSY_HOME_FILES_MIN}" />
		<concat destfile="${JSY_TMP_FILE}">
			<fileset dir="${JSY_SRC_DIR}" includes="myHome/*.js" />
		</concat>
		<echo message="Minimizing to ${JSY_HOME_FILES_MIN}" />	
	    <java jar="${JSY_BUILD_DIR}/yuicompressor-2.2.5.jar" fork="true">
	        <arg line=" --type js -o ${JSY_HOME_FILES_MIN} ${JSY_TMP_FILE}"/>
	    </java>	
	
		<!-- création du fichier myNablife -->
		<echo message="Building ${JSY_NABLIFE_FILES_MIN}" />
		<concat destfile="${JSY_TMP_FILE}">
			<fileset dir="${JSY_SRC_DIR}" includes="myNablife/*.js" />
		</concat>
		<echo message="Minimizing to ${JSY_NABLIFE_FILES_MIN}" />	
	    <java jar="${JSY_BUILD_DIR}/yuicompressor-2.2.5.jar" fork="true">
	        <arg line=" --type js -o ${JSY_NABLIFE_FILES_MIN} ${JSY_TMP_FILE}"/>
	    </java>	
		
		<!-- création du fichier myTerrier -->
		<echo message="Building ${JSY_TERRIER_FILES_MIN}" />
		<concat destfile="${JSY_TMP_FILE}">
			<fileset dir="${JSY_SRC_DIR}" includes="myTerrier/*.js" />
		</concat>
		<echo message="Minimizing to ${JSY_TERRIER_FILES_MIN}" />	
	    <java jar="${JSY_BUILD_DIR}/yuicompressor-2.2.5.jar" fork="true">
	        <arg line=" --type js -o ${JSY_TERRIER_FILES_MIN} ${JSY_TMP_FILE}"/>
	    </java>			
	
	
		<delete file="${JSY_TMP_FILE}" />
	
	    <echo message="===== JAVASCRIPTS END =====" />
	</target>
	
	<!-- Build the WAR file. depends="compile.all,cssy_nabaztag,jsy_nabaztag" -->
	  <target name="build.war" description="Builds the WAR file." depends="compile.jsp,cssy_nabaztag,jsy_nabaztag">
	    <echo message="===== START BUILDING WAR FILE =====" />
	    <delete file="${deploy.war}"/>
	    <war destfile="${deploy.war}" webxml="${web.dir}/web.xml" duplicate="fail">
	      <webinf dir="${web.dir}">
	      	<exclude name="src/" />
	      </webinf>
			<fileset dir="${build.dir}" includes="${include.in.war}"/>
			<lib dir="${lib.dir}" excludes="${exclude.from.warlib}"/>
	    	<lib dir="${COMMONDIR}/lib" excludes="${exclude.from.warlib}"/>
	    	<lib dir="${OSDIR}/lib" excludes="${exclude.from.warlib}"/>
	    	<lib dir="${DBENGINEDIR}/lib" excludes="${exclude.from.warlib}"/>
	      <metainf dir="${build.dir}/META-INF"/>
	    </war>
	    <echo message="===== END BUILDING WAR FILE =====" />
	  </target>
	
	<path id="tomcat.ant.classpath">
	 	<pathelement location="${OSDIR}/lib/catalina-ant.jar" />
	</path>
	<taskdef name="deploy" classname="org.apache.catalina.ant.DeployTask" classpathref="tomcat.ant.classpath"/>
	
	<taskdef name="undeploy" classname="org.apache.catalina.ant.UndeployTask" classpathref="tomcat.ant.classpath"/>
	
	<taskdef name="reload" classname="org.apache.catalina.ant.ReloadTask" classpathref="tomcat.ant.classpath" />
	
	<!-- Deploys and reload the WebApp -->
	<target name="deployOnly" depends="build.war" description="Hot deploys the WAR file to each tomcats.">
		<deploy url="http://${host}:${port}/manager" username="admin" password="${password}" path="/vl" war="${deploy.war}"/>
		<reload url="http://${host}:${port}/manager" username="admin" password="${password}" path="/vl" />
		<delete file="${deploy.war}"/>
	</target>
	
	<!-- unDeploys, Deploys and reload the WebApp -->
	<target name="redeploy" description="Hot deploys the WAR file to each tomcats.">
	    <echo message="===== DEPLOYING THE WAR FILE  =====" />
		<undeploy url="http://${host}:${port}/manager" username="admin" password="${password}" path="/vl"/>
		<deploy url="http://${host}:${port}/manager" username="admin" password="${password}" path="/vl" war="${deploy.war}"/>
		<reload url="http://${host}:${port}/manager" username="admin" password="${password}" path="/vl" />
	  	<delete file="${deploy.war}"/>
	</target>
	<target name="hotDeploy" depends="build.war, redeploy"/>
	
	
	
	<!-- JUnit reports publication -->
	<target name="tests" depends="compile.tests">
		
		<mkdir dir="${test.report.dir}" />
		
		<junit fork="yes" printsummary="no" haltonfailure="no" failureproperty="junit.failure.db">
	    	<jvmarg value="-Xmx2048m" />
	
			<classpath>
				<fileset dir="${lib.dir}" />
				<path refid="Xlib.path" />
				<pathelement location="${classes.dest}" />
				<pathelement location="${test.classes.dest}" />
				<pathelement location="${test.src.dir}" />
			</classpath>	
			
			<formatter type="xml" />
	
			<sysproperty key="silence" value="true"/>
	        <sysproperty key="net.violet.platform.datamodel.factories.impl" value="net.violet.platform.datamodel.factories.implementations.FactoryImpl"/>
	        <sysproperty key="log4j.configuration" value="log4j-cli.properties"/>
	
			<batchtest fork="yes" todir="${test.report.dir}">
				<fileset dir="${test.src.dir}">
					<include name="**/datamodel/*Test.java" />
					<include name="**/datamodel/factories/implementations/*Test.java" />
					<include name="**/daemons/crawlers/gestion/*Test.java" />
					<exclude name="**/DBTest.java" />
				</fileset>
			</batchtest>
		</junit>
	
		<junit fork="yes" printsummary="no" haltonfailure="no" failureproperty="junit.failure">
	    	<jvmarg value="-Xmx2048m" />
	
			<classpath>
				<fileset dir="${lib.dir}" />
				<path refid="Xlib.path" />
				<pathelement location="${classes.dest}" />
				<pathelement location="${test.classes.dest}" />
				<pathelement location="${src.dir}" />
			</classpath>	
	
			<formatter type="xml" />
	
			<sysproperty key="silence" value="true"/>
	        <sysproperty key="net.violet.platform.datamodel.factories.impl" value="net.violet.platform.datamodel.factories.mock.FactoryMock"/>
	        <sysproperty key="log4j.configuration" value="log4j-cli.properties"/>
	
			<batchtest fork="yes" todir="${test.report.dir}">
				<fileset dir="${test.src.dir}">
					<include name="**/*Test.java" />
					<!-- Classes de base (ou autre) qui ne sont pas des tests -->
					<exclude name="**/ActionTest.java" />
					<exclude name="**/CrawlerTest.java" />
					<exclude name="**/datamodel/*.java" />
					<exclude name="**/datamodel/factories/implementations/*.java" />
					<exclude name="**/daemons/crawlers/gestion/*Test.java" />
					<exclude name="**/CacheNodeTest.java" />
					<exclude name="**/VioletApiComponentTest.java" />
				</fileset>
			</batchtest>
		</junit>
	
		<!-- Generate Junit report -->
		<mkdir dir="${test.report.dir}/html" />
		<junitreport todir="${test.report.dir}">
			<fileset dir="${test.report.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${test.report.dir}/html" />
		</junitreport>
	
	    <antcall target="archive.reports"/>
	
		<!-- Erreur si un test a échoué. -->
		<fail message="JUnit datamodel tests failed" if="junit.failure.db"/>
		<fail message="JUnit tests failed" if="junit.failure"/>
	</target>
		
	<target name="archive.reports" if="reports.archive.dir">
		<!-- Copy report -->
		<tstamp>
			<format property="now" pattern="yyyy.MM.dd_kk:mm:ss" locale="en" />
		</tstamp>
		
	    <copy todir="${reports.archive.dir}/${now}">
	        <fileset dir="${test.report.dir}"/>
	    </copy>
	    <exec executable="/usr/bin/unlink">
		   	<arg value="${reports.archive.dir}/_latest"/>
		</exec>
	    <exec executable="/bin/ln">
		   	<arg value="-s"/>
		   	<arg value="${reports.archive.dir}/${now}"/>
		   	<arg value="${reports.archive.dir}/_latest"/>
		</exec>
	</target>
	
	</project>
	
